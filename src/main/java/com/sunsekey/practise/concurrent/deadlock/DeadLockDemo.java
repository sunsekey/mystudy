package com.sunsekey.practise.concurrent.deadlock;

/**
 * 死锁
 * 死锁的四个条件：
 * 互斥条件：某个资源在任一时刻只能由一个线程占用（没办法破坏这个条件，因为我们加锁的本意就是如此）
 * 请求和保持：一个线程请求新资源的同时，已获得的资源保持着不去释放（应一次性申请所有资源）
 * 不剥夺条件：线程已获得的资源在未使用完之前不能被其他线程强行剥夺（占用着资源的线程如果申请新资源不成功，应该主动释放资源）
 * 循环等待：多个线程形成头尾相连的循环等待资源关系（按某一顺序申请资源，反序释放资源）
 */
public class DeadLockDemo {

}
