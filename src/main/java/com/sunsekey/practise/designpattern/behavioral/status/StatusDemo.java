package com.sunsekey.practise.designpattern.behavioral.status;

/**
 * 状态模式：所谓状态模式就是允许对象在<内部状态发生改变时改变它的行为>，对象看起来好像修改了它的类。
 *          简单说就是以状态为原子来改变它的行为，而不是通过行为来改变状态（后者即，每个行为执行时可能都得用大量的if else去判断是否能执行这个行为，如果可以，就去改变状态）
 *          （即将行为封装在状态对象里面，在某个状态下就执行相应的那组行为，换一个状态就是另一组行为）
 * 优点：1）将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。
 *      2）状态类"包含"了行为以及状态转换逻辑，要新增状态只需要增加一个状态类
 *
 * 缺点：1）对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态；
 * 而且修改某个状态类的行为也需修改对应类的源代码。
 *      2）增加类、对象个数和结构复杂度
 *
 * 适用场景：1）对象的行为依赖于它的状态（属性）并且可以根据它的状态改变而改变它的相关行为。
 *      2）代码中包含大量与对象状态有关的条件语句
 *
 * 加深理解：可理解为以（环境角色中的）"当前状态"去进行不同操作
 */
public class StatusDemo {

    public static void main(String[] args) {
        // here comes an order
        Order order = new Order();
        // 此时初始状态是待支付
        order.cancel();
        order.refund();
        order.pay();
        order.cancel();
        order.refund();
    }

}
